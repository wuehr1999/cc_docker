
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+38 (git sha1 2310a0ea9, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Running command `read -sv src/blink.v; synth_gatemate -top blink -nomx8 -vlog net/blink_synth.v' --

1. Executing Verilog-2005 frontend: src/blink.v
Parsing SystemVerilog input from `src/blink.v' to AST representation.
Storing AST representation for module `$abstract\blink'.
Successfully finished Verilog frontend.

2. Executing SYNTH_GATEMATE pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\CC_IBUF'.
Generating RTLIL representation for module `\CC_OBUF'.
Generating RTLIL representation for module `\CC_TOBUF'.
Generating RTLIL representation for module `\CC_IOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IBUF'.
Generating RTLIL representation for module `\CC_LVDS_OBUF'.
Generating RTLIL representation for module `\CC_LVDS_TOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IOBUF'.
Generating RTLIL representation for module `\CC_IDDR'.
Generating RTLIL representation for module `\CC_ODDR'.
Generating RTLIL representation for module `\CC_DFF'.
Generating RTLIL representation for module `\CC_DLT'.
Generating RTLIL representation for module `\CC_LUT1'.
Generating RTLIL representation for module `\CC_LUT2'.
Generating RTLIL representation for module `\CC_LUT3'.
Generating RTLIL representation for module `\CC_LUT4'.
Generating RTLIL representation for module `\CC_MX2'.
Generating RTLIL representation for module `\CC_MX4'.
Generating RTLIL representation for module `\CC_MX8'.
Generating RTLIL representation for module `\CC_ADDF'.
Generating RTLIL representation for module `\CC_MULT'.
Generating RTLIL representation for module `\CC_BUFG'.
Generating RTLIL representation for module `\CC_BRAM_20K'.
Generating RTLIL representation for module `\CC_BRAM_40K'.
Generating RTLIL representation for module `\CC_FIFO_40K'.
Generating RTLIL representation for module `\CC_L2T4'.
Generating RTLIL representation for module `\CC_L2T5'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\CC_PLL'.
Generating RTLIL representation for module `\CC_PLL_ADV'.
Generating RTLIL representation for module `\CC_SERDES'.
Generating RTLIL representation for module `\CC_CFG_CTRL'.
Generating RTLIL representation for module `\CC_USR_RSTN'.
Successfully finished Verilog frontend.

2.3. Executing HIERARCHY pass (managing design hierarchy).

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\blink'.
Generating RTLIL representation for module `\blink'.

2.4.1. Analyzing design hierarchy..
Top module:  \blink

2.4.2. Analyzing design hierarchy..
Top module:  \blink
Removing unused module `$abstract\blink'.
Removed 1 unused modules.

2.5. Executing PROC pass (convert processes to netlists).

2.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$src/blink.v:13$14 in module blink.
Removed a total of 0 dead cases.

2.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

2.5.4. Executing PROC_INIT pass (extract init attributes).

2.5.5. Executing PROC_ARST pass (detect async resets in processes).

2.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

2.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\blink.$proc$src/blink.v:13$14'.
     1/1: $0\counter[26:0]

2.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\blink.\counter' using process `\blink.$proc$src/blink.v:13$14'.
  created $dff cell `$procdff$20' with positive edge clock.

2.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\blink.$proc$src/blink.v:13$14'.
Removing empty process `blink.$proc$src/blink.v:13$14'.
Cleaned up 1 empty switch.

2.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~1 debug messages>

2.6. Executing FLATTEN pass (flatten design).

2.7. Executing TRIBUF pass.

2.8. Executing DEMINOUT pass (demote inout ports to input or output).

2.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.11. Executing CHECK pass (checking for obvious problems).
Checking module blink...
Found and reported 0 problems.

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.12.9. Finished OPT passes. (There is nothing left to do.)

2.13. Executing FSM pass (extract and optimize FSM).

2.13.1. Executing FSM_DETECT pass (finding FSMs in design).

2.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$20 ($dff) from module blink (D = $add$src/blink.v:18$16_Y, Q = \counter, rval = 27'000000000000000000000000000).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.14.16. Finished OPT passes. (There is nothing left to do.)

2.15. Executing WREDUCE pass (reducing word size of cells).

2.16. Executing PEEPOPT pass (run peephole optimizers).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.18. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

2.19. Executing SHARE pass (SAT-based resource sharing).

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.23. Executing TECHMAP pass (map to technology primitives).

2.23.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/mul_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/mul_map.v' to AST representation.
Generating RTLIL representation for module `\$__MULMXN'.
Successfully finished Verilog frontend.

2.23.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.24. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module blink:
  creating $macc model for $add$src/blink.v:18$16 ($add).
  creating $alu model for $macc $add$src/blink.v:18$16.
  creating $alu cell for $add$src/blink.v:18$16: $auto$alumacc.cc:485:replace_alu$23
  created 1 $alu and 0 $macc cells.

2.25. Executing OPT pass (performing simple optimizations).

2.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.25.6. Executing OPT_DFF pass (perform DFF optimizations).

2.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.25.9. Finished OPT passes. (There is nothing left to do.)

2.26. Executing MEMORY pass.

2.26.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.26.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.26.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.26.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.26.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.26.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.26.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.26.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.26.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.26.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.28. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.29. Executing TECHMAP pass (map to technology primitives).

2.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__CC_BRAM_TDP_'.
Generating RTLIL representation for module `\$__CC_BRAM_SDP_'.
Successfully finished Verilog frontend.

2.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.30.3. Executing OPT_DFF pass (perform DFF optimizations).

2.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.30.5. Finished fast OPT passes.

2.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.32.6. Executing OPT_DFF pass (perform DFF optimizations).

2.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.32.9. Finished OPT passes. (There is nothing left to do.)

2.33. Executing TECHMAP pass (map to technology primitives).

2.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_gatemate_alu'.
Successfully finished Verilog frontend.

2.33.3. Continuing TECHMAP pass.
Using template $paramod$956e79e8f8c5e64be7438155ae50a966e615cb04\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~99 debug messages>

2.34. Executing OPT pass (performing simple optimizations).

2.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~54 debug messages>

2.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.34.3. Executing OPT_DFF pass (perform DFF optimizations).

2.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 27 unused cells and 17 unused wires.
<suppressed ~28 debug messages>

2.34.5. Finished fast OPT passes.

2.35. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port blink.clk using CC_IBUF.
Mapping port blink.led using CC_OBUF.
Mapping port blink.rst using CC_IBUF.
Removed 0 unused cells and 1 unused wires.

2.36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.38. Executing TECHMAP pass (map to technology primitives).

2.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/reg_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/reg_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFE_xxxx_'.
Generating RTLIL representation for module `\$_DLATCH_xxx_'.
Successfully finished Verilog frontend.

2.38.2. Continuing TECHMAP pass.
Using template $paramod$0ea0c0ecb89aa8a394fc59f557ec4597a0d47f80\$_DFFE_xxxx_ for cells of type $_DFFE_PP0P_.
No more expansions possible.
<suppressed ~66 debug messages>

2.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..
Removed 0 unused cells and 162 unused wires.
<suppressed ~1 debug messages>

2.42. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module blink..
  Treeifying 27 MUXes:
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$230.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$228.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$226.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$224.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$222.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$220.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$258.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$272.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$270.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$268.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$266.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$264.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$262.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$260.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$256.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$254.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$252.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$250.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$248.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$246.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$244.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$242.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$240.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$238.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$236.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$234.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2607:MuxGate$232.
    Finished treeification: Found 27 trees.
  Covering trees:
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$230: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$228: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$226: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$224: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$222: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$220: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$258: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$272: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$270: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$268: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$266: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$264: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$262: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$260: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$256: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$254: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$252: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$250: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$248: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$246: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$244: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$242: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$240: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$238: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$236: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$234: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2607:MuxGate$232: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~460 debug messages>

2.43. Executing OPT pass (performing simple optimizations).

2.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.
<suppressed ~27 debug messages>

2.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \blink..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \blink.
Performed a total of 0 changes.

2.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\blink'.
Removed a total of 0 cells.

2.43.6. Executing OPT_SHARE pass.

2.43.7. Executing OPT_DFF pass (perform DFF optimizations).

2.43.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.43.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module blink.

2.43.10. Finished OPT passes. (There is nothing left to do.)

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/mux_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/mux_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.45. Executing ABC pass (technology mapping using ABC).

2.45.1. Extracting gate netlist of module `\blink' to `<abc-temp-dir>/input.blif'..
Extracted 27 gates and 55 wires to a netlist network with 28 inputs and 27 outputs.

2.45.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      28.
ABC: Participating nodes from both networks       =      54.
ABC: Participating nodes from the first network   =      27. (  96.43 % of nodes)
ABC: Participating nodes from the second network  =      27. (  96.43 % of nodes)
ABC: Node pairs (any polarity)                    =      27. (  96.43 % of names can be moved)
ABC: Node pairs (same polarity)                   =      27. (  96.43 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.45.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       27
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       28
ABC RESULTS:          output signals:       27
Removing temp directory.
Removed 0 unused cells and 55 unused wires.

2.46. Executing TECHMAP pass (map to technology primitives).

2.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/gatemate/lut_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/gatemate/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
No more expansions possible.
<suppressed ~43 debug messages>
Removed 0 unused cells and 54 unused wires.

2.47. Executing CLKBUFMAP pass (inserting clock buffers).
Inserting CC_BUFG on blink.$iopadmap$clk[0].

2.48. Executing HIERARCHY pass (managing design hierarchy).

2.48.1. Analyzing design hierarchy..
Top module:  \blink

2.48.2. Analyzing design hierarchy..
Top module:  \blink
Removed 0 unused modules.

2.49. Printing statistics.

=== blink ===

   Number of wires:                 37
   Number of wire bits:            142
   Number of public wires:           4
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     CC_ADDF                        27
     CC_BUFG                         1
     CC_DFF                         27
     CC_IBUF                         2
     CC_LUT2                        27
     CC_OBUF                         1

2.50. Executing CHECK pass (checking for obvious problems).
Checking module blink...
Found and reported 0 problems.

2.51. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \blink..

2.52. Executing Verilog backend.

2.52.1. Executing BMUXMAP pass.

2.52.2. Executing DEMUXMAP pass.
Dumping module `\blink'.

End of script. Logfile hash: c9999a90df, CPU: user 0.15s system 0.01s, MEM: 26.03 MB peak
Yosys 0.30+38 (git sha1 2310a0ea9, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 33% 1x abc (0 sec), 26% 13x read_verilog (0 sec), ...
